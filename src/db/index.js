import Logger from '@utils/logger'
import * as fs from 'fs'
import * as path from 'path'
import config from '@config'
import Knex from 'knex'
import { Model } from 'objection'

const log = Logger('db')

const createConfig = () => {
    
    switch (config.database.type) {
        
        case 'sqlite':
            const filename = path.join(config.root, config.database.sqliteFile)
            const filepath = path.dirname(filename)
            if (!fs.existsSync(filepath)) {
                log.i('Creating database directory', filepath)
                fs.mkdirSync(filepath)
            }
            return {
                client: 'better-sqlite3', // or 'sqlite3'
                connection: {
                    filename,
                },
                useNullAsDefault: true,
                timezone: 'utc',
            }
        
        case 'postgres':
            return {
                client: 'pg',
                connection: {
                    host: config.database.host,
                    port: config.database.port,
                    user: config.database.user,
                    password: config.database.password,
                    database: config.database.database,
                    timezone: 'utc',
                },
            }
        
        default:
            throw new Error(`Unknown database type: ${config.database.type}`)
        
    }
    
}

const createInstance = () => {
    
    const _config = createConfig()
    const instance = Knex(_config)
    
    // Save this config to a file so Knex can run migrations
    const _configFile = path.join(config.root, 'knexfile.js')
    const _configData = [
        '// DO NOT EDIT THIS FILE',
        '// AUTO GENERATED BY THE DATABASE CONFIG',
        '',
        'module.exports = ' + JSON.stringify({
            development: _config,
            staging: _config,
            production: _config,
        }, null, 4),
    ].join('\n')
    
    fs.writeFileSync(_configFile, _configData, 'utf8')
    
    log.i('Wrote Knex migrations config to', _configFile)
    
    return instance
    
}

export const knex = createInstance()

export const debugWipeAllUsers = async () => {
    // @todo @debug
    // DELETE ALL USERS
    await knex('users').delete()
    const count = await knex('users').count('id')
    console.log('@debug user count', count)
}

Model.knex(knex)

export default knex
